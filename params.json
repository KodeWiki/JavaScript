{"name":"Javascript","tagline":"Notes from Eloquent Javascript","body":"### Numbers\r\n\r\n```javascript\r\nvar intVar = 10\r\ntypeof intVar           // 'number'\r\n\r\nvar a = 10.3456e3       // 10345.6\r\nvar inf = -11 / 0       // -Infinity\r\nvar nan = 2 / 'string'  // NaN : Non-sensical mathematical operation\r\n```\r\n\r\n#### `NaN`\r\n`NaN` is number which represents a non-sensical mathematical statement. To check if a variable is `NaN`, `isNaN()` method should be used\r\n```javascript\r\ntypeof NaN                  // 'number'\r\n\r\nisNaN(3)                    // false\r\nisNaN('3')                  // false\r\nisNaN('three')              // true\r\n\r\nconsole.log(NaN == NaN)     // one non-sensical math op is not equal to other\r\n(9 / 0) === (8 / 0)         // true! how can one infinite number be equal to another?\r\n```\r\n\r\n\r\n#### `undefined`\r\n- a variable that does not point to a real value has `undefined` as value\r\n- a function that does not return anything returns `undefined`\r\n\r\n#### `null`\r\n`TODO` to be completed later\r\n\r\n### Strings\r\n```javascript\r\nconsole.log(typeof 'string')        // 'string'\r\nconsole.log(typeof typeof 4.5)      // 'string'\r\n\r\nconsole.log(\"A new line character is printed by escaping \\\"\\\\n\\\"\")\r\nvar concatStr = \"con\" + \"cat\" + \"e\" + \"nate\"\r\n\r\n// String comparision\r\nconsole.log('abc' == 'Abc')         // false\r\nconsole.log('abc' == 'abc')         // true\r\nconsole.log('abc' === 'abc')        // true\r\n// TODO : explore '<', '>', '>=' and similar operators\r\n// uppercase letters have less value than lower case symbols\r\n```\r\n\r\n### Type Coercion\r\n**Automatic type coercion -** When an operator is applied to wrong type of values then js quietly tries converting them to suitable type\r\n```javascript\r\nconsole.log('5' - 1)                // 4\r\nconsole.log('5' + 1)                // 51\r\nconsole.log('8' * null)             // 0\r\nconsole.log('five' - 2)             // NaN, \"five\" couldn't convert to number\r\nconsole.log(1 == '1')               // true\r\n\r\nconsole.log(null == undefined)      // true, exception : null and undefined\r\n                                    // have same values!\r\n\r\nconsole.log(false == null)          // false, useful to check if some variable\r\n                                    // have real value, compare them to null\r\n                                    // or (undefined).\r\nconsole.log(null == 0)              // false, real value vs. null\r\nconsole.log(0 == '')                // true\r\nconsole.log(0 == '0')               // true\r\n```\r\n\r\nFor cases where automatic type coercion is not desirable use `===` or `!==`\r\n```javascript\r\nconsole.log(0 === '0')              // false\r\nconsole.log('abc' === 'abc')        // true\r\n```\r\n\r\n**Explicit Type Coercion** \r\n```javascript\r\nconsole.log(Number('34'))           // 34\r\nconsole.log(String(34))             // '34'\r\nconsole.log(Boolean(undefined))     // false\r\nconsole.log(Number('three'))        // NaN\r\n```\r\n\r\n### Booleans\r\n- Boolean value `true`, `false`\r\n- Boolean Operators `&&`, `||`, `==`, `!`, `!=`, `<=`, `>=`\r\n- `&&` and `||` operators : returns last value required for computation of expression. Also in case of these operators an expression is evaluated if necessary\r\n\r\n```javascript\r\nconsole.log(null || 'b')            // 'b', useful for setting a fallback value\r\n                                    // incase runtime value is empty or null\r\nconsole.log('a' || 'b')             // 'a'\r\nconsole.log('a' && 'b')             // 'b'\r\nconsole.log(null && 'b')            // null\r\n```\r\n```javascript\r\nfunction isTrue(val) {\r\n    boolVal = val ? true : false    // alternative : Boolean(val)\r\n    console.log(val + ' is ' + boolVal)\r\n}\r\n\r\nisTrue(NaN)            // false\r\nisTrue(null)           // false\r\nisTrue(undefined)      // false\r\nisTrue('')             // false\r\nisTrue('a')            // true\r\nisTrue(0)              // false\r\nisTrue(1)              // true\r\nisTrue([])             // true\r\nisTrue({})             // true\r\n```\r\n\r\n### Conditionals and Loops\r\n##### `if-else` statement\r\n```javascript\r\nvar num = 1\r\nif (num < 10)\r\n    console.log('small')\r\nelse if (num < 100)\r\n    console.log('medium')\r\nelse\r\n    console.log('large')\r\n```\r\n\r\n##### `switch-case` statement\r\n```javascript\r\nvar one = 1\r\nswitch(one) {\r\n    case '1':\r\n        console.log('one')\r\n        break\r\n    case '2':\r\n        console.log('two')\r\n        break\r\n    default:\r\n        console.log('no suitable match found')\r\n}\r\n```\r\n\r\n##### `while` loop\r\n```javascript\r\nvar i = 0,\r\n    sum = 0\r\nwhile (i <= 10) {\r\n    sum += i++\r\n}\r\n// TODO : do-while loop\r\n```\r\n\r\n##### `for` loop\r\n```javascript\r\nfor (var i = 1, sum = 0; i < 10; i++) {\r\n    sum += i\r\n    if (i == 5) break;  // similarly continue can be used\r\n}\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}